const data = `9723091437893078378924278230029121879932324592647795856021233551530788930677879471235550249964738591
8706022005959392613065169248447843431058380440671780720011620241178604056206588018173875712665877780
6604294009157524225750978359386087784910006319573462504733302007550644244416860555309666143960284433
9905098046329437984266483484036424215113087770568839815684622999970610213760978479445665033917635618
4380501933398737022551218175224313768634530097722556915525170838999989513613190133883494072695235546
2017993321343971170487140749800479728921670197718764931895640769290048594337721395134833976720710248
5711381537186464958745506847659294725046587663441762959713254374967526439291852991251749452362883692
6197635602159676735044118558655612930248015006676289187992609555887902552384931099132235765977120982
9549323159747189534733553288605170660113452189871969044965465294171927882743330914600244521713268078
5414543948046703710768106882534586887630137643708724941521196118616518667429354205643815948917639328
3059810158320062627062145398917709419586750302989346060507115845361173531350916529553234802083529006
9696114076815534711098261788518356859674653224205849446294291433507644275776280510715932129955396690
8383930440050503531284431940948656113788280637464454229710508412305786811865689977182038864956946196
6227500185329563996260388289671612702548597065572320620372491351571151612528442660415889668218839437
8578756546298281980834091143920408622883677140929922840855851753876560923947653794230719080714283470
1027893448397082921060821216295614616587609424669777508578510203078632553378066703506307845521788247
0710333196294684592608804417887991015779582714967939045004806546865946987895612411723628418899678593
0084503301808878078259003169899370181966929542067640691488755066800209802760822908280144608773848306
5144481361139612361044509165353446012396734378835448235651422529407336536209319467410336749167873395
7584191564426477840533299045060839158075340700840308587733574589866004012431691863471550620255239002
7949296013261210159034745447564061123648459650008329083180677566139590849742770048965785687834195697
8317027925617149033383736981049547409772125534455712683390258812487879050657013802316529322651902534
5093333502881905636944136076090277368329569013979430808732360344255664169922118880256420490482783493
2036561407705840775312519846609016665370663023759934756512090287454902711570242327978001778079060541
0659718146344118831661160958728342579180023783648309150364823883317846666965251129782382248516588508
9245384803029015146772521661249214222620967952746470131324143808176341706882653582491951526567254081
9216935978890615561989813135151549926585059076018591806749083128897585155271548418713425154194510165
9318354147180176440341902276123808307343239647414633257171389837626210324977846126183187471964369568
7415729730064527397059271893424589102444520124528698003266894179638104698617673926815644656039715027
3436652830273784968357958026424286690651435290732254222194429329199886942049321391825833121449145766
4924869358521395973329216201828992205628980647748136241553447202187179755237931583872258128268278048
9851290563890641628045664647591175235887908113968581257742590129026624072505373108271907579413960952
7982375401341639558530387995651780245578488855226671987293531518345700316481806929780099261780073511
4452810762792750064663838985416554364924531668554595911498267942733052521109057745212367778752630145
7557099491697451243110992183672677316169616685640710324200484649850304458538643275096637258928219645
3002024808865744789903935237566943154078679146148757070530015513999028483460890167694886137359149908
0822828304194267960146013161641808897363639787196513011053868604696060536938202894967828010799866833
1554162904249142888940104660304837558466881939777616358203948692873637346253412581214127858493025415
7246455463958484520360024733340002891592906628913074112066897445547465316590558684960859867507921239
8784294065896621279284630041471322513314519102819697352921164326530390111759212110306991409106069751
6575225625207123743274440362571941510441790136071077416051455172508786343637173735580027650016183337
4938959466751877649096487109420985613713366640185316915372224003170796460084232840821590905893832535
8173445695285204288415925684770007100018912647344134204697555007429445323739831429776190006024182252
3337688173935861225796036789442363475844197040807224168659909229876002655827206237697032775945745232
0251686893322889355009752862711174961214346841983902062547498442997493686352164727844568456663267758
5425191922336239782723394864200387609080191388393591056733098784379360327461807229259790397900318706
4513177732519541648370511260465924993395855220839038852110811131678859673344576174925647725609858245
7755953407067489612051748580396796408569930530124571462704617480478336357709121346863733180854329738
4034578968210867753037074550769026636148528585225878475803102199075152978131989381951472641309266182
6540520926170784551330130311271209358244360273723755370691206736522317196594679762516691627569179396
5405345252956966741935596743429420458539197284073673999807209675277987285895365338578608405246211488
6306127501744888308294070592963273640082672955405790144741928977768902631344948312996507332625389602
5611962473839649658840453183915729978067556275719474246161159565380586908499360156961008281580915649
4399159983554014950289144842402610885268382421305042657007802534424187501513158964822972346181920042
2882174253184280007591555059372568174686107691724223760817973396563336099173127826892007858994549667
2040396356809182253648404216027895816063605379915790211562416182805600809145975902607580858335450614
4742754130330930473680275511353899540683161220174966103752859436396618111330163871889062093602227917
7590696439854301083249856620440571424025933206430125857742523744762632260978587914940256491223443378
7996504315247262732813943187605171407363135103232127174672622212987966152877492132531135928633627052
3810933596331127479933745986832299565043153169086742804783877743750999648900742717444384254771251955
5014926416168223415085859556169471214511070677043517345786469585253524733972219194052421794506408433
0697370224293711447513233643346165656367469762067117686644553000765865087834015001087190481111487434
4285524891106814602236809502305421705659852119005852884030501149941101277978935434749970311970651471
9985193454453378445234232225688824130025299389962401187984819281247298736439016479808366888636533043
4779457494892160340193304721242681681919682075770198144792373345632858316647140214034844037447197737
7917967748551135577438889723248652920389547038407172724103220150362477685400466056295130509689142548
0256943048242936798244140310778882065130900645492824322351481957082806537708858169740848640546450409
7083466095916609766248461079189498992521435133213112522358346048145971471102580499679521527068809719
5955315791630783925479518564475561518065104804952270297490194936616450308805584912633085977091842179
9201603139736654346705002050091713893472014105366348507730926921161882459378429256994926400283198954
4874197500828210859113449159709126708876593711348735298725418732063860528244222743607322072258619428
4030303443457410465623253806895196266257333279699698693178801305853885737396165807634876513905681471
8474457384086477214490475706637315970081739455483029981903709800193978054779049724243316475440096559
1047097716897461542263324171748677323268788466690445372436521816604887446130394065734658854369779828
5732981761616604074719472302826016948546119844528032799940593168294178225527950367824249234165927593
1633733243852931363938399324797227788078642679589420881262946210594625578681308717441567654566581682
7109957896558827332972794494282815702579628079578394178685504443262426263942286815019271837506722735
4110992784045901153973068718863923610912475853759519860312585830107601159081579096362102726197951720
8444184801034633219199723526840665681210055230073748962392137643518801595097583408551979680025528537
1366041750058299662484991968642749965407877667565022100924605957009119850552773596040396152735191146
1590133293665692846598478980803923231361581379938438889887744394337306672446908835730904866203387066
1239847986804167807062398670691836064610864383428897649572069833177992983606633090684921236638410534
5876577491186510327812956411653228803302685035886680574722020123758798809164859961080152269448918740
2672415755088989006867802638149657853499136496757132415369632630840124983856953423833035238444453793
2272251679001786957821644341793235696921384769023046987811279066432984739854862753831791379439943309
0858245146382363871585892122219322172692096242272892997585592729658423557411230522096907235396132667
9240390962728908159925748908830856401164849618523505085599419850140176415820559332349600045926602656
5990780798025692495249870444231257148738012922939613622677041332319540634704399652767176519648200884
7585290987829241614032150603602527034188045306978003126383192007468018924566747970060017988692610970
6358488639774747068295205173336426750491857512059324778068492541912657473473252796336451610803331440
3365110006225161181311915735545620824747041302687504833908535646066759970037904157141271915113892237
9387341103043661756551661774140564766049473255468076098224740705860628647458112212154260082411466805
9299404874038527443311497801536949389673062763153538994955674619564932901439049774772522885414484281
1792718722425450340255177855338649197625196469636282064469076922964871648992942522421361084805230232
1755004176046297912785459530134840834653287884953580066393072538519818607068619718193460090984801838
7449931739272709655296762712644804785649138143781520577793189318076216122449105226577021076240363650
1797155723257385848893311833238893737072200539278000831729418343049929499775774749969555835119018425
3781119956723295037882905702428668934252473349107941701476135997775978873368125874591460627245322226
6982830827579236569476828624779390035596305746974937760457260901446490616511944535382859000651230922
6522237298225216414182700632311932412486684229094722929132443553919589694474810533026596002437093353`;

function pathFinder(areaStr){
  const area = areaStr.split("\n").map(row => row.split("").map(cell => +cell));
  const visited = area.map(row => row.map(() => "."));
  const N = area.length - 1;

  visited[0][0] = 0;

  function check(x, y) {
    if (x < 0 || x > N || y < 0 || y > N) return false;
    return true;
  }

  function getCandidates(x, y) {
    return [[x+1, y], [x, y+1], [x-1, y], [x, y-1]]
      .filter(cell => check(cell[0], cell[1]))
      .map((cell) => {
        const level = area[x][y];
        const currentLevel = area[cell[0]][cell[1]];
        return {x: cell[0], y: cell[1], transitionCost: Math.abs(level - currentLevel)};
      })
  }

  let candidates = [{x: 0, y: 0, transitionCost: 0}];

  function pushOrUpdate(candidate) {
    let existed = candidates.find(cell => (cell.x === candidate.x && cell.y === candidate.y));
    if (existed) {
      existed.transitionCost = candidate.transitionCost;
      return;
    }
    candidates.push(candidate);
  }

  let count = 0;
  while (candidates.length > 0 && count < 100000) {
    count++;
    // find candidate with minimal transitionCost
    const first = candidates.reduce((acc, cell) => cell.transitionCost < acc.transitionCost ? cell : acc, candidates[0]);
    //candidates = candidates.filter(cell => !(cell.x === first.x && cell.y === first.y));
    candidates.splice(candidates.findIndex(cell => (cell.x === first.x && cell.y === first.y)), 1);
    const newCandidates = getCandidates(first.x, first.y);

    newCandidates.forEach(candidate => {
      const currentCost = visited[first.x][first.y];
      const nextCost = currentCost + candidate.transitionCost;
      const visitedCost = visited[candidate.x][candidate.y];
      if (visitedCost === ".") {
        // not visited yet - set cost
        visited[candidate.x][candidate.y] = nextCost;
        pushOrUpdate(candidate);
      } else if (visitedCost <= nextCost) {
        // expensive - skip it
        return;
      } else {
        // cheaper - update cost
        visited[candidate.x][candidate.y] = nextCost;
        pushOrUpdate(candidate);
      }
    });
  }

  console.log("count", count);

  return visited[N][N];
}

console.time("exec");
console.log(pathFinder(data));
console.timeEnd("exec");
